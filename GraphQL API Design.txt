
# GraphQL Schema:

type User {
  id: ID!
  username: String!
  tasks: [Task]
  notes: [Note]
}

type Task {
  id: ID!
  name: String
  description: String
  dueDate: ISO8601Date
  userId: Int!
}

type Note {
  id: ID!
  name: String
  content: String
  userId: Int!
}

type Query {
  getUserTasks(userId: ID!): [Task]
  getUserNotes(userId: ID!): [Note]
}

type Mutation {
  createUser(username: String!, password: String!): User
  loginUser(username: String!, password: String!): User
  createTask(userId: ID!, name: String!, description: String, dueDate: ISO8601Date): Task
  updateTask(id: ID!, name: String, description: String, dueDate: ISO8601Date): Task
  deleteTask(id: ID!): Task
  createNote(userId: ID!, name: String!, content: String): Note
  updateNote(id: ID!, name: String, content: String): Note
  deleteNote(id: ID!): Note
}

This GraphQL schema defines the types User, Task, and Note.
It includes queries and mutations for creating, updating, and deleting tasks/notes.
It also includes login and creating user as fetching user-specific tasks/notes.

A database will be needed to persist user data, tasks, and notes.
The resolver functions for User, Tasks and Notes would handle the logic for querying and manipulating this data based on the GraphQL schema's definitions,
They will also be responsible for raising any errors during execution.
Additionally, we will need authentication and authorization mechanisms to ensure that users can only access and modify their own tasks and notes.